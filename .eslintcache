[{"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\index.js":"1","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\reportWebVitals.js":"2","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\Playground.js":"3","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\Name.js":"4","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\Paint.js":"5","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\ColorPicker.js":"6","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\WindowSize.js":"7"},{"size":600,"mtime":1608991842525,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":2798,"mtime":1609510100931,"results":"11","hashOfConfig":"9"},{"size":380,"mtime":1608989221809,"results":"12","hashOfConfig":"9"},{"size":1007,"mtime":1608994524263,"results":"13","hashOfConfig":"9"},{"size":638,"mtime":1608988839120,"results":"14","hashOfConfig":"9"},{"size":771,"mtime":1608990075886,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1w5njpu",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\index.js",["36","37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport Playground from './Playground';\nimport Name from './components/Name';\nimport Paint from './components/Paint';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Playground />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["38","39"],"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\reportWebVitals.js",[],"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\Playground.js",["40","41","42","43","44","45","46"],"import React ,{useState,useEffect,useRef,useCallback,useMemo,useImperativeHandle,forwardRef,useDebugValue}from 'react'\nimport randomcolor from 'randomcolor'\nimport './App.css';\n\nfunction Playground() {\n  const[count,setCount] =useState(0)\n  const inputref=useRef()\n  const[color,setColor] =useState(null)\n  useCallback(()=>console.log('useCallback'))\n  useMemo(()=>()=>console.log('useMemo'))\n  useEffect(()=>{\n    setColor(randomcolor())\n    inputref.current.focus()\n  },[count])\n  \n  return (\n\n    <div className=\"App\" > \n    <div style={{ borderTop:`10px solid ${color}`}}>\n    <h1>{count}</h1>\n     <button onClick={()=>setCount(count+1)}>+</button>\n     <button onClick={()=>setCount(count-1)}>-</button>\n     <button onClick={() =>setColor(randomcolor())}>Change Color</button>\n    </div>\n     <input ref={inputref} type='range' onChange={e=> setCount(e.target.value) } value={count}/>\n     \n    </div>\n  );\n  const Calculate = React.memo(({cb,num})=>{\n    cb(num)\n    const rendercount=useRef(1)\n  return <div>{rendercount.current++}</div>\n  })\n}\n\n\nexport default Playground;\n/**\n * useCallback() - process function\n * const memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n * useMemo() - function's result\n const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n */\n/**\n * useDebugValue(date, date => date.toDateString());\n * Syntax : useDebugValue(value, function to format a value)\n */\n/**\n * useLayoutEffect() The signature is identical to useEffect()\n */\n\n/**    useImperativeHandle(ref, createHandle, [deps])\n * function FancyInput(props, ref) {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus();\n    }\n  }));\n  return <input ref={inputRef} ... />;\n}\nFancyInput = forwardRef(FancyInput);\n */\n\n/**           useRef()\n * function TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` points to the mounted text input element\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n */\n\n\n\n /** useReducer() Hook   is  probably same as useState\n  * const initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n      <button onClick={() => dispatch({type: 'increment'})}>+</button>\n    </>\n  );\n}\n  */","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\Name.js",["47"],"import React,{useState} from 'react'\r\n\r\nfunction Name(){\r\nconst[name,setName]=useState('')\r\n\r\nreturn(\r\n    <label className='header-name'>\r\n    <input\r\n    value={name}\r\n    onChange={e => setName(e.target.value)}\r\n    onClick={e=> e.target.setSele}\r\n    onClick={e=> e.target.setSelectionRange(0,e.target.value.length)}\r\n   \r\n    />\r\n    </label>\r\n \r\n)\r\n}\r\n\r\nexport default Name;","F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\Paint.js",[],"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\ColorPicker.js",["48","49","50"],"import React, { useState, useEffect } from 'react'\r\nimport randomColor from 'randomcolor'\r\n\r\nexport default function ColorPicker({ colors = [], activeColor, setActiveColor }) {\r\n  if (!colors.length) return null\r\n  return (\r\n    <fieldset className=\"color-picker\">\r\n      {colors.map((color, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name=\"color\"\r\n            type=\"radio\"\r\n            value={color}\r\n            checked={activeColor === color}\r\n            onChange={() => setActiveColor(color)}\r\n          />\r\n          <span style={{ background: color }} />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  )\r\n}\r\n",["51","52"],"F:\\React\\React projects\\React_practice_works\\hooks-work\\src\\components\\WindowSize.js",[],{"ruleId":"53","severity":1,"message":"54","line":7,"column":8,"nodeType":"55","messageId":"56","endLine":7,"endColumn":12},{"ruleId":"53","severity":1,"message":"57","line":8,"column":8,"nodeType":"55","messageId":"56","endLine":8,"endColumn":13},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"53","severity":1,"message":"62","line":1,"column":62,"nodeType":"55","messageId":"56","endLine":1,"endColumn":81},{"ruleId":"53","severity":1,"message":"63","line":1,"column":82,"nodeType":"55","messageId":"56","endLine":1,"endColumn":92},{"ruleId":"53","severity":1,"message":"64","line":1,"column":93,"nodeType":"55","messageId":"56","endLine":1,"endColumn":106},{"ruleId":"65","severity":1,"message":"66","line":9,"column":3,"nodeType":"55","endLine":9,"endColumn":14},{"ruleId":"65","severity":1,"message":"67","line":10,"column":3,"nodeType":"55","endLine":10,"endColumn":10},{"ruleId":"68","severity":1,"message":"69","line":29,"column":3,"nodeType":"70","messageId":"71","endLine":33,"endColumn":5},{"ruleId":"53","severity":1,"message":"72","line":29,"column":9,"nodeType":"55","messageId":"56","endLine":29,"endColumn":18},{"ruleId":"73","severity":1,"message":"74","line":12,"column":5,"nodeType":"75","endLine":12,"endColumn":70},{"ruleId":"53","severity":1,"message":"76","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"77","line":1,"column":27,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"78","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":19},{"ruleId":"58","replacedBy":"79"},{"ruleId":"60","replacedBy":"80"},"no-unused-vars","'Name' is defined but never used.","Identifier","unusedVar","'Paint' is defined but never used.","no-native-reassign",["81"],"no-negated-in-lhs",["82"],"'useImperativeHandle' is defined but never used.","'forwardRef' is defined but never used.","'useDebugValue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","'Calculate' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'useEffect' is defined but never used.","'randomColor' is defined but never used.",["81"],["82"],"no-global-assign","no-unsafe-negation"]